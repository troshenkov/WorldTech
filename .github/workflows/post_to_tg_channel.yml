# ==================================================================================================
# File: .github/workflows/post_to_tg_channel.yml
#
# Workflow Name: Post News to Telegram
#
# Description:
#   This workflow automates the process of posting Markdown news files from the `updates/` directory
#   to a Telegram channel. It handles images, documents, and text content, ensuring compliance with
#   Telegram's message size limits. After posting, files are archived in the `posted/` directory.
#
# Features:
#   - Posts images (![](url)) and documents (PDF, DOC, etc.) before text content.
#   - Splits long messages into chunks (max 4096 characters) for Telegram compatibility.
#   - Adds inline buttons with a "Read More" link to each post.
#   - Skips empty files gracefully and logs all actions for debugging.
#   - Archives processed files to avoid reposting.
#   - Saves detailed logs to GitHub Actions artifacts for inspection.
#   - Commits and pushes archived files back to the repository.
#
# Triggers:
#   - Scheduled daily at 8 AM UTC.
#   - Manual trigger via workflow dispatch.
#
# Required Secrets:
#   - TELEGRAM_BOT_TOKEN: Telegram Bot API token.
#   - TELEGRAM_CHAT_ID: Target Telegram chat ID.
#
# Author: Dmitry Troshenkov <troshenkov.d@gmail.com>
# Last updated: 2025-04-23
# ==================================================================================================

name: Post News to Telegram

on:
  schedule:
    - cron: '0 8 * * *'  # Every day at 8 AM UTC
  workflow_dispatch:     # Allow manual triggering of the workflow

jobs:
  post_to_telegram:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu environment
    environment: production # Environment with Telegram secrets

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Ensure required directories exist
      run: |
        # Function to ensure a directory exists
        ensure_directory() {
          local dir_name=$1
          mkdir -p "$dir_name"
          if [ -d "$dir_name"; then
            echo "Directory '$dir_name' is ready."
          else
            echo "Failed to create directory '$dir_name'. Exiting."
            exit 1
          fi
        }

        # Ensure required directories exist
        ensure_directory "updates"
        ensure_directory "posted"
        ensure_directory "logs"

    - name: Validate required Telegram secrets
      run: |
        # Function to check if a secret is set
        check_secret() {
          local secret_name=$1
          local secret_value=$2
          if [ -z "$secret_value"; then
            echo "$secret_name is not set. Exiting."
            exit 1
          else
            echo "$secret_name is set."
          fi
        }

        # Validate secrets
        check_secret "TELEGRAM_BOT_TOKEN" "$TELEGRAM_BOT_TOKEN"
        check_secret "TELEGRAM_CHAT_ID" "$TELEGRAM_CHAT_ID"

        echo "All required Telegram secrets are validated successfully."
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    - name: Post news files to Telegram
      run: |
        # Define directories for news files and processed files
        NEWS_DIR="updates"
        POSTED_DIR="posted"
        LOG_DIR="logs"

        ensure_directory "$LOG_DIR"

        # Function to send an image to Telegram
        send_image() {
          local image_url=$1
          echo "Sending image: $image_url" >> "$LOG_DIR/telegram.log"
          RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendPhoto" \
            -d chat_id="$TELEGRAM_CHAT_ID" -d photo="$image_url")
          echo "$RESP" >> "$LOG_DIR/telegram.log"
          echo "$RESP" | grep -q '"ok":true' || {
            echo "Failed to send image: $image_url" >> "$LOG_DIR/telegram.log"
            return 1
          }
        }

        # Function to send a document to Telegram
        send_document() {
          local document_url=$1
          echo "Sending document: $document_url" >> "$LOG_DIR/telegram.log"
          RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument" \
            -d chat_id="$TELEGRAM_CHAT_ID" -d document="$document_url")
          echo "$RESP" >> "$LOG_DIR/telegram.log"
          echo "$RESP" | grep -q '"ok":true' || {
            echo "Failed to send document: $document_url" >> "$LOG_DIR/telegram.log"
            return 1
          }
        }

        # Function to send a text message to Telegram
        send_text_chunk() {
          local chunk=$1
          echo "Sending text chunk:" >> "$LOG_DIR/telegram.log"
          echo "$chunk" >> "$LOG_DIR/telegram.log"
          RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode="MarkdownV2" --data-urlencode text="$chunk")
          echo "$RESP" >> "$LOG_DIR/telegram.log"
          echo "$RESP" | grep -q '"ok":true' || {
            echo "Failed to send text chunk." >> "$LOG_DIR/telegram.log"
            return 1
          }
        }

        # Function to send inline buttons to Telegram
        send_buttons() {
          local buttons=$1
          echo "Sending inline buttons." >> "$LOG_DIR/telegram.log"
          RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode="MarkdownV2" \
            --data-urlencode text="See more" -d "reply_markup=$buttons")
          echo "$RESP" >> "$LOG_DIR/telegram.log"
          echo "$RESP" | grep -q '"ok":true' || {
            echo "Failed to send buttons." >> "$LOG_DIR/telegram.log"
            return 1
          }
        }

        # Find all Markdown files in the updates directory
        FILES=$(find "$NEWS_DIR" -type f -name '*.md')

        # Exit if no Markdown files are found
        [ -z "$FILES" ] && echo "No Markdown files to post." && exit 0

        # Loop through each Markdown file
        for FILE in $FILES; do
          echo "Processing file: $FILE" >> "$LOG_DIR/telegram.log"

          # Read the content of the file
          CONTENT=$(cat "$FILE")

          # Skip empty files
          [ -z "$CONTENT" ] && echo "Skipping empty file: $FILE" >> "$LOG_DIR/telegram.log" && continue

          # Extract image URLs from Markdown (![](url))
          IMAGE_URLS=$(grep -oE '!\[[^]]*\]\(([^)]+)\)' "$FILE" | sed -E 's/!\[[^]]*\]\(([^)]+)\)/\1/')

          # Check if there are any image URLs
          if [ -n "$IMAGE_URLS"; then
            for IMG in $IMAGE_URLS; do
              send_image "$IMG" || continue
            done
          fi

          # Extract document URLs (e.g., PDF, DOC, DOCX, PPTX)
          DOC_PATTERN='https?://[^ )]+\.(pdf|docx?|pptx?)'
          DOCUMENT_URLS=$(grep -oE "$DOC_PATTERN" "$FILE" | sort -u)

          # Check if there are any document URLs
          if [ -n "$DOCUMENT_URLS"; then
            for DOC in $DOCUMENT_URLS; do
              send_document "$DOC" || continue
            done
          fi

          # Remove image Markdown syntax from the content for cleaner text
          CLEANED_MSG=$(echo "$CONTENT" | sed -E 's/!\[[^\]]*\]\([^)]*\)//g')

          # Check if there is any text content to send
          if [ -n "$CLEANED_MSG"; then
            # Split the cleaned message into chunks (max 4096 characters) and send each chunk
            CHUNK_SIZE=4096
            while [ ${#CLEANED_MSG} -gt 0 ]; do
              CHUNK="${CLEANED_MSG:0:$CHUNK_SIZE}"
              CLEANED_MSG="${CLEANED_MSG:$CHUNK_SIZE}"
              send_text_chunk "$CHUNK" || continue
            done
          fi

          # Send inline buttons (e.g., "Read More" link)
          BUTTONS='{"inline_keyboard":[[{"text":"Read More","url":"http://example.com"}]]}'
          send_buttons "$BUTTONS" || continue

          # Archive the processed file by moving it to the posted directory with a timestamp
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          BASENAME=$(basename "$FILE")
          mv "$FILE" "$POSTED_DIR/${TIMESTAMP}_$BASENAME"
          echo "Finished processing: $FILE" >> "$LOG_DIR/telegram.log"
        done
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    - name: Upload logs
      uses: actions/upload-artifact@v3.6.0
      with:
        name: telegram-logs
        path: logs/

    - name: Commit and push archived files
      run: |
        GITHUB_USER_NAME="GitHub Actions Bot"
        GITHUB_USER_EMAIL="actions@github.com"

        # Configure Git user information
        git config user.name "${GITHUB_USER_NAME}"
        git config user.email "${GITHUB_USER_EMAIL}"

        # Stash any unstaged changes to avoid conflicts
        git stash --include-untracked

        # Pull the latest changes from the remote repository with rebase
        git pull --rebase origin main

        # Apply the stashed changes back
        git stash pop || echo "No stashed changes to apply."

        # Stage all changes (e.g., moved files in the posted directory)
        git add posted/

        # Commit the changes with the current date in the message
        git commit -m "Move processed news files to posted directory on $(date +'%Y-%m-%d')" || echo "No changes to commit."

        # Push the changes to the repository
        git push origin main

    - name: Commit and push logs
      run: |
        GITHUB_USER_NAME="GitHub Actions Bot"
        GITHUB_USER_EMAIL="actions@github.com"

        # Configure Git user information
        git config user.name "${GITHUB_USER_NAME}"
        git config user.email "${GITHUB_USER_EMAIL}"

        # Stage all log files
        git add logs/

        # Commit the logs with the current date in the message
        git commit -m "Add Telegram logs on $(date +'%Y-%m-%d')" || echo "No log changes to commit."

        # Push the log changes to the repository
        git push origin main


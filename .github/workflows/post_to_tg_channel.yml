# ==================================================================================================
# File: .github/workflows/post_to_tg_channel.yml
#
# Workflow Name: Post News to Telegram
#
# Description:
#   Posts Markdown news files from the `updates/` directory to a Telegram channel.
#   Messages longer than 4096 characters are split into chunks.
#   Markdown images (![](url)) are sent as media before text.
#   Supported documents (PDF, DOC, etc.) are also sent prior to text.
#   Inline buttons are included with each post.
#   After sending, files are archived in the `posted/` directory.
#
# Features:
#   - Handles image/document posting before text.
#   - Splits long messages to meet Telegram limits.
#   - Adds inline buttons with a "Read More" link.
#   - Skips empty files gracefully.
#   - Provides specific error reporting on failures.
#   - Avoids reposting by archiving processed files.
#   - Includes manual trigger and daily cron.
#
# Required Secrets:
#   - TELEGRAM_BOT_TOKEN: Telegram Bot API token.
#   - TELEGRAM_CHAT_ID: Target Telegram chat ID.
#
# Author: Dmitry Troshenkov <troshenkov.d@gmail.com>
# Last updated: 2025-04-22
# ==================================================================================================

name: Post News to Telegram

on:
  schedule:
    - cron: '0 8 * * *'  # Every day at 8 AM UTC
  workflow_dispatch:     # Allow manual triggering of the workflow

jobs:
  post_to_telegram:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu environment
    environment: production # Environment with Telegram secrets

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Ensure required directories exist
      run: |
        mkdir -p updates posted

    - name: Validate required Telegram secrets
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        [ -z "$TELEGRAM_BOT_TOKEN" ] && echo "TELEGRAM_BOT_TOKEN is not set." && exit 1
        [ -z "$TELEGRAM_CHAT_ID" ] && echo "TELEGRAM_CHAT_ID is not set." && exit 1

    - name: Post news files to Telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        # Define directories for news files and processed files
        NEWS_DIR="updates"
        POSTED_DIR="posted"

        # Find all Markdown files in the updates directory
        FILES=$(find "$NEWS_DIR" -type f -name '*.md')

        # Exit if no Markdown files are found
        [ -z "$FILES" ] && echo "$(date) - No new Markdown files to post." && exit 0

        # Loop through each Markdown file
        for FILE in $FILES; do
          echo "$(date) - Processing file: $FILE"

          # Read the content of the file
          CONTENT=$(cat "$FILE")

          # Skip empty files
          [ -z "$CONTENT" ] && echo "$(date) - Skipping empty file: $FILE" && continue

          # Extract image URLs from Markdown (![](url))
          IMAGE_URLS=$(grep -oP '!\[[^\]]*\]\(\K[^)]+(?=\))' "$FILE")

          # Send each image to Telegram
          for IMG in $IMAGE_URLS; do
            echo "$(date) - Sending image: $IMG"
            RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendPhoto" \
              -d chat_id="$TELEGRAM_CHAT_ID" -d photo="$IMG")
            echo "$RESP" | grep -q '"ok":true' || {
              echo "$(date) - Failed to send image: $IMG"
              echo "$RESP" | jq '.description'
              exit 1
            }
          done

          # Extract document URLs (e.g., PDF, DOC, DOCX, PPTX)
          DOC_PATTERN='https?://[^ )]+\.(pdf|docx?|pptx?)'
          DOCUMENT_URLS=$(grep -oE "$DOC_PATTERN" "$FILE" | sort -u)

          # Send each document to Telegram
          for DOC in $DOCUMENT_URLS; do
            echo "$(date) - Sending document: $DOC"
            RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument" \
              -d chat_id="$TELEGRAM_CHAT_ID" -d document="$DOC")
            echo "$RESP" | grep -q '"ok":true' || {
              echo "$(date) - Failed to send document: $DOC"
              echo "$RESP" | jq '.description'
              exit 1
            }
          done

          # Remove image Markdown syntax from the content for cleaner text
          CLEANED_MSG=$(echo "$CONTENT" | sed -E 's/!\[[^\]]*\]\([^)]*\)//g')

          # Split the cleaned message into chunks (max 4096 characters) and send each chunk
          CHUNK_SIZE=4096
          while [ ${#CLEANED_MSG} -gt 0 ]; do
            CHUNK="${CLEANED_MSG:0:$CHUNK_SIZE}"
            CLEANED_MSG="${CLEANED_MSG:$CHUNK_SIZE}"
            RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode="MarkdownV2" \
              --data-urlencode text="$CHUNK")
            echo "$RESP" | grep -q '"ok":true' || {
              echo "$(date) - Failed to send message chunk."
              echo "$RESP" | jq '.description'
              exit 1
            }
          done

          # Send inline buttons (e.g., "Read More" link)
          BUTTONS='{"inline_keyboard":[[{"text":"Read More","url":"http://example.com"}]]}'
          RESP=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode="MarkdownV2" \
            --data-urlencode text="See more" -d "reply_markup=$BUTTONS")
          echo "$RESP" | grep -q '"ok":true' || {
            echo "$(date) - Failed to send inline button."
            echo "$RESP" | jq '.description'
            exit 1
          }

          # Archive the processed file by moving it to the posted directory with a timestamp
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          BASENAME=$(basename "$FILE")
          mv "$FILE" "$POSTED_DIR/${TIMESTAMP}_$BASENAME"
          echo "$(date) - Finished processing: $FILE"
        done

    - name: Commit and push archived files
      run: |
        GITHUB_USER_NAME="GitHub Actions Bot"
        GITHUB_USER_EMAIL="actions@github.com"

        # Configure Git user information
        git config user.name "${GITHUB_USER_NAME}"
        git config user.email "${GITHUB_USER_EMAIL}"

        # Stash any unstaged changes to avoid conflicts
        git stash --include-untracked

        # Pull the latest changes from the remote repository with rebase
        git pull --rebase origin main

        # Apply the stashed changes back
        git stash pop || echo "No stashed changes to apply."

        # Stage all changes (e.g., moved files in the posted directory)
        git add posted/

        # Commit the changes with the current date in the message
        git commit -m "Move processed news files to posted directory on $(date +'%Y-%m-%d')" || echo "No changes to commit."

        # Push the changes to the repository
        git push origin main

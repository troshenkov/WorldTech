# ==================================================================================================
# File: .github/workflows/post_to_tg_channel.yml
#
# Workflow Name: Post News to Telegram
#
# Description:
#   This GitHub Actions workflow posts each Markdown news file in the `updates/` directory
#   as a separate message to a Telegram channel. If a message exceeds 4,096 characters, it is split
#   into smaller chunks and sent as multiple messages. After posting, the files are moved to a `posted/`
#   directory to avoid re-posting.
#
# Improvements:
#   - Handles Telegram's 4,096-character limit by splitting long messages.
#   - Posts each news file as a separate Telegram message.
#   - Archives processed files to avoid duplicates.
#   - Improved error handling and logging.
#   - Added manual trigger for the workflow.
#
# Required Secrets:
#   - TELEGRAM_BOT_TOKEN: Token from @BotFather to send messages via Telegram Bot API.
#   - TELEGRAM_CHAT_ID: Telegram chat ID where the message will be sent.
#
# Author: Dmitry Troshenkov <troshenkov.d@gmail.com>
# Last updated: 2025-04-22
# ==================================================================================================

name: Post News to Telegram

# Trigger the workflow on a schedule or manually
on:
  schedule:
    # Run the workflow every day at 8 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  post_to_telegram:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu environment
    environment: production # Specify the environment for deployment

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Ensure required directories exist
    - name: Prepare directories
      run: |
        mkdir -p updates
        mkdir -p posted

    # Step 3: Validate Telegram secrets
    - name: Validate Telegram secrets
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        ERRORS=""

        if [ -z "${TELEGRAM_BOT_TOKEN}" ]; then
          ERRORS+="Error: TELEGRAM_BOT_TOKEN is not set. Please configure the secret and try again.\n"
        fi

        if [ -z "${TELEGRAM_CHAT_ID}" ]; then
          ERRORS+="Error: TELEGRAM_CHAT_ID is not set. Please configure the secret and try again.\n"
        fi

        if [ -n "$ERRORS" ]; then
          echo -e "$ERRORS"
          exit 1
        fi

        echo "Success: TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID are set."

    # Step 4: Post each news item to Telegram
    - name: Post each news item to Telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        NEWS_DIR="updates"
        POSTED_DIR="posted"

        # Check if there are any news files
        if [ -z "$(ls -A $NEWS_DIR/*.md 2>/dev/null)" ]; then
          echo "No news files found. Exiting."
          exit 0
        fi

        # Loop through all .md files in the updates directory
        for FILE in $NEWS_DIR/*.md; do
          echo "Processing file: $FILE"

          # Read the content of the file
          MESSAGE=$(cat "$FILE")

          # Validate the message content
          if [ -z "$MESSAGE" ]; then
            echo "Error: File $FILE is empty. Skipping."
            continue
          fi

          # Split the message into chunks if it exceeds 4,096 characters
          CHUNK_SIZE=4096
          while [ ${#MESSAGE} -gt 0 ]; do
            CHUNK="${MESSAGE:0:$CHUNK_SIZE}"
            MESSAGE="${MESSAGE:$CHUNK_SIZE}"

            # Send the chunk to Telegram
            RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" \
              -d parse_mode="MarkdownV2" \
              --data-urlencode text="$CHUNK")

            # Check if the message was sent successfully
            if [[ "$RESPONSE" != *'"ok":true'* ]]; then
              echo "Error: Failed to send message chunk for file $FILE. Response: $RESPONSE"
              exit 1
            fi
          done

          echo "Message successfully sent for file: $FILE"

          # Add a timestamp to the filename and move the file to the posted directory
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          BASENAME=$(basename "$FILE")
          mv "$FILE" "$POSTED_DIR/${TIMESTAMP}_$BASENAME"
        done

        echo "All news items have been posted."

    # Step 5: Commit and push processed files to the repository
    - name: Commit and push processed files
      run: |
        GITHUB_USER_NAME="GitHub Actions Bot"
        GITHUB_USER_EMAIL="actions@github.com"

        # Configure Git user information
        git config user.name "${GITHUB_USER_NAME}"
        git config user.email "${GITHUB_USER_EMAIL}"

        # Stash any unstaged changes to avoid conflicts
        git stash --include-untracked

        # Pull the latest changes from the remote repository with rebase
        git pull --rebase origin main

        # Apply the stashed changes back
        git stash pop || echo "No stashed changes to apply."

        # Stage all changes (e.g., moved files in the posted directory)
        git add posted/

        # Commit the changes with the current date in the message
        git commit -m "Move processed news files to posted directory on $(date +'%Y-%m-%d')" || echo "No changes to commit."

        # Push the changes to the repository
        git push origin main

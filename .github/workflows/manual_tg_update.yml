# ==================================================================================================
# File: .github/workflows/manual_tg_update.yml
#
# Workflow Name: Manual update channel
#
# Description:
#   This GitHub Actions workflow is triggered manually via `workflow_dispatch`. It detects 
#   the first modified Markdown (.md) file from the latest commit, checks the file size to 
#   ensure it doesn't exceed Telegram's 4096 character limit, and sends its content to a specified 
#   Telegram channel using the Telegram Bot API.
#
# Use Case:
#   This workflow is useful for manually triggering updates to a Telegram channel when a 
#   Markdown file (e.g., changelog, documentation) is updated in a commit.
#
# Trigger:
#   - Event: workflow_dispatch
#     - This allows manual triggering of the workflow via GitHub Actions UI.
#
# Required Secrets:
#   - TELEGRAM_BOT_TOKEN: Token from @BotFather to send messages via Telegram Bot API
#   - TELEGRAM_CHANNEL_ID: Telegram channel ID where the message will be sent
#
# Assumptions:
#   - At least one Markdown file (.md) is modified in the commit.
#   - The file content is under Telegram's 4096 character limit for a message.
#
# Limitations:
#   - Only the first `.md` file found in the commit will be processed.
#   - If the file size exceeds Telegram's limit, the workflow will fail.
#
# Author: Dmitry Troshenkov <troshenkov.d@gmail.com>
# Last updated: 2025-04-20
# ==================================================================================================

name: Manual update channel

# Trigger the workflow manually via the GitHub Actions UI
on:
  workflow_dispatch:  # Manually triggered workflow

jobs:
  post_to_telegram:
    runs-on: ubuntu-latest  # Runs on the latest Ubuntu environment

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Get the current date and store it as an environment variable
    - name: Get current date
      id: get_date
      run: echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

    # Step 3: Rename 'latest.md' to a file with the current date (e.g., '2025-04-20.md')
    - name: Rename latest.md to a date-based filename
      run: |
        NEW_FILE="updates/${CURRENT_DATE}.md"  # Create a new filename using the current date
        mv updates/latest.md $NEW_FILE  # Rename the 'latest.md' to the new date-based filename
        echo "Renamed latest.md to $NEW_FILE"  # Log the renaming action

    # Step 4: Commit the renamed file and push the change to the repository
    - name: Commit and push renamed file
      run: |
        # Define variables for GitHub username and email
        GITHUB_USER_NAME="GitHub Actions Bot"  # Use a generic automation username
        GITHUB_USER_EMAIL="actions@github.com"  # Use a generic automation email

        # Configure git user information
        #git config user.name "${GITHUB_USER_NAME}"
        #git config user.email "${GITHUB_USER_EMAIL}"
        
        # Pull the latest changes from the remote repository
        git pull

        # Stage the renamed file and commit it
        git add updates/${CURRENT_DATE}.md  # Add the renamed file to staging
        git commit -m "Rename latest.md to ${CURRENT_DATE}.md"  # Commit the changes

        # Push the changes to the repository
        git push # Push the changes back to the repository

    # Step 5: Read the content of the renamed file and prepare it for Telegram
    - name: Read the Markdown message content
      id: read_message
      run: |
        echo "msg<<EOF" >> $GITHUB_OUTPUT  # Start reading the message
        cat $NEW_FILE >> $GITHUB_OUTPUT  # Append the content of the renamed file
        echo "EOF" >> $GITHUB_OUTPUT  # End of the message content

    # Step 6: Send the content to the Telegram channel using the Telegram Bot API
    - name: Send message to Telegram
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}  # Use your Telegram bot token from secrets
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  # Use your Telegram chat ID from secrets
      run: |
        echo "Bot Token: ${TELEGRAM_BOT_TOKEN::10}..."
        echo "Channel ID: $TELEGRAM_CHAT_ID"
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d parse_mode="MarkdownV2" \
          --data-urlencode text="${{ steps.read_message.outputs.msg }}"  # Send the content to Telegram
